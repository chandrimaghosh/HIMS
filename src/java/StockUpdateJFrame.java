
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author chandrimaghosh/Nishant Shetty
 */
public class StockUpdateJFrame extends javax.swing.JFrame {

    /**
     * Creates new form StockUpdateJFrame
     */
    int vendorid;
    Product vendors_products=new Product();
    Availibilty ven_avail=new Availibilty();
    ArrayList<Product> vproducts=new ArrayList<>();
     ArrayList<Availibilty> vas=new ArrayList<>();
      DefaultTableModel dtm;
            
    public StockUpdateJFrame(int vid) {
        initComponents();
         this.setDefaultCloseOperation(this.HIDE_ON_CLOSE);
        vendorid=vid;
        populatestockTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stock_quantity = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        StockTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        stock_quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stock_quantityActionPerformed(evt);
            }
        });

        jLabel1.setText("Quantity");

        jButton1.setText("Add Stock");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        StockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(StockTable);

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(stock_quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(98, 98, 98))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jButton2)
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(stock_quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int quant=Integer.valueOf(stock_quantity.getText());
      int rowSelected;
        rowSelected = StockTable.getSelectedRow();
                if(rowSelected > 0){
            int proid=(Integer)StockTable.getModel().getValueAt(rowSelected, 0);
              int quantpresent=(Integer)StockTable.getModel().getValueAt(rowSelected, 3); 
        PreparedStatement update_msa;
        try {
            update_msa = login.con.prepareStatement 
                    ("Update MedicineStockAvailability Set quantity=?"
                            + " Where Productid=? and Vendorid=?" );
                        
                update_msa.setInt(1, (quantpresent+quant));
                update_msa.setInt(2, proid);
                update_msa.setInt(3, vendorid);
                update_msa.execute();
        }catch (SQLException ex) {
   Logger.getLogger(StockUpdateJFrame.class.getName()).log(Level.SEVERE, null, ex);
                  }
        JOptionPane.showMessageDialog(null, "Stock Updated");
                } 
                
                 
                 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void stock_quantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stock_quantityActionPerformed
     
    }//GEN-LAST:event_stock_quantityActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
        StockUpdateJFrame sj=new StockUpdateJFrame(vendorid);
        sj.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

   private void populatestockTable()
   {
        
        ((DefaultTableModel)StockTable.getModel()).setRowCount(0);
        StockTable.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        StockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null,null,null,},
                
            },
            new String [] {
               "ProductId", "ProductName", "Desc",  "Quantity","Availbe?","Price",}
        ));
        
         PreparedStatement products_on_vendor;
        try {
            products_on_vendor = login.con.prepareStatement
        (" Select prd.Prdname,prd.Prddesp ,prd.Prdprice,prd.Prdid,msa.quantity,msa.available from "
        + "Product prd ,MedicineStockAvailability msa where Vendorid=? and prd.Prdid=msa.Productid" );
            products_on_vendor.setInt(1, vendorid);     
            ResultSet rs = products_on_vendor.executeQuery();
                     
            	  
                        
                       while(rs.next()){
                        
                       Product product=new Product();
                       Availibilty a=new Availibilty();
                       product.setProductName(rs.getString(1));
                       product.setProductDescription(rs.getString(2));
                       product.setProductPrice(rs.getFloat(3));
                       product.setProductId(rs.getInt(4));
                       a.setQuantity(rs.getInt(5));
                       a.setAvailble(rs.getBoolean(6));
                       
                      
                       vas.add(a);
                       vproducts.add(product);
                       }
                    Iterator<Product> vp = vproducts.iterator();
                    Iterator<Availibilty>ai=vas.iterator();
                                        int rowCount=StockTable.getRowCount();
                    
           dtm= (DefaultTableModel)StockTable.getModel();
                    for(int i=rowCount-1;i>0;i--){
                        dtm.removeRow(i);
                        }
        
            while(vp.hasNext()&&ai.hasNext()) {
            Product pro=new Product();
            Availibilty av=new Availibilty();
            // "ProductId", "ProductName", "Desc",  "Quantity","Availbe?","Price",  
            pro=vp.next();
            av=ai.next();
            Object row[] = new Object[6];
            row[0]=pro.getProductId();
            row[1]=pro.getProductName();
            row[2]=pro.getProductDescription();
            row[3]=av.getQuantity();
            row[4]=av.getAvailble();    
            row[5]=pro.getProductPrice();
            dtm.addRow(row);
        }
               
              dtm.fireTableDataChanged();
                this.repaint(); 
              
   }catch (SQLException ex) {
                      Logger.getLogger(StockUpdateJFrame.class.getName()).log(Level.SEVERE, null, ex);
                  
                 }}
   private void cleartable()
   {
                int rowCount=StockTable.getRowCount();
                 dtm= (DefaultTableModel)StockTable.getModel();
                    for(int i=rowCount-1;i>0;i--){
                        dtm.removeRow(i);
                        }
                    ((DefaultTableModel)StockTable.getModel()).setRowCount(0);
   }
               

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable StockTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField stock_quantity;
    // End of variables declaration//GEN-END:variables
}
