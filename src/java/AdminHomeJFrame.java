
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author chandrimaghosh/Nishant Shetty
 */

/**
The Administrator Home Page displays to the administrator all the possible orders
* in HIMS

 */


public class AdminHomeJFrame extends javax.swing.JFrame {

    /**
     * Creates new form AdminHomeJFrame
     */
    public AdminHomeJFrame(String adminuname) {
        initComponents();
         this.setDefaultCloseOperation(this.HIDE_ON_CLOSE);
         
              masterOrder.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        masterOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null,null,null,null,null,null,null,null},
                
            },
            new String [] {
              "Oid","Orderedby", "Price","ProductId","Cancelled?",
                "Dispatched","Doctor","Patient","OrderDate","expdate"}
        ));
        
       Order o =new Order();
       ArrayList<Order> active_orders=new ArrayList<>();
    
     
                   
        try{
            PreparedStatement standing_orders =login.con.prepareStatement
                ("select  Productid , Orderedby,Doctorid,Patientid,OrderPrice,"
                 + "Oid , OrderDate,OrderCompExp from OrderTable ");
                    
         
                    ResultSet r = standing_orders.executeQuery();
 
                  while(r.next()){
                      
                       Order order=new Order();
                       order.setProductIdinOrder(r.getInt(1));
                       order.setOrderedBy(r.getString(2));
                       order.setDoctorIdinOrder(r.getInt(3));
                       order.setPatientIdinOrder(r.getInt(4));
                       order.setOrderPrice(r.getFloat(5));
                       order.setDispatched(false);
                       order.setCancelled(false);
                       order.setoId(r.getInt(6));
                       order.setOrderDate(r.getDate(7));
                       order.setOrderCompExp(r.getDate(8));
                          active_orders.add(order);
           		    }
                 Iterator<Order> ao = active_orders.iterator();
                
  
                   int rowCount=masterOrder.getRowCount();
       
                   DefaultTableModel dtm= (DefaultTableModel)masterOrder.getModel();
                        for(int i=rowCount-1;i>0;i--){
                        dtm.removeRow(i);
                            }
       // "Oid","Orderedby", "Price","ProductId","Cancelled?","Dispatched","Doctor","Patient"}
        while(ao.hasNext()) {
           Order active=new Order();
           active=ao.next();
          
            Object row[] = new Object[10];
         row[0]=active.getoId();
         row[1]=active.getOrderedBy();
         row[2]=active.getOrderPrice();
         row[3]=active.getProductIdinOrder();
         row[4]=active.isCancelled();
         row[5]=active.isDispatched();
         row[6]=active.getDoctorIdinOrder();
         row[7]=active.getPatientIdinOrder();
         row[8]=active.getOrderDate();
         row[9]=active.getOrderCompExp();
         
         dtm.addRow(row);
        }}
        catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        masterOrder = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        masterOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(masterOrder);

        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(84, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap(100, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
         try {
             login.con.close();
         } catch (SQLException ex) {
             Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable masterOrder;
    // End of variables declaration//GEN-END:variables
}
