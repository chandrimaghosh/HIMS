
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author chandrimaghosh/Nishant Shetty
 */
public class DoctorOrderManagerJframe extends javax.swing.JFrame {

    /**
     * Creates new form DoctorOrderManagerJframe
     * @param docid
     */
    public DoctorOrderManagerJframe(int docid,String personType ) {
        initComponents();
        this.setDefaultCloseOperation(this.HIDE_ON_CLOSE);
        int doctor_who_ordered=docid;
        String ptype=personType;
        orderHistoryTable.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        orderHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null,null,null,null},
                
            },
            new String [] {
              "Oid","VendorID", "Price","ProductId","Cancelled?","Dispatched"}
        ));
        
        
        
      Order order=new Order();
      ArrayList<Order> orders=new ArrayList<>();
      
            
            PreparedStatement pop_orders;
        try {
            pop_orders = login.con.prepareStatement
                (" Select Oid,Vendorid,OrderPrice,Productid ,Cancelled,Dispatched from OrderTable where Orderedby=? and Doctorid=?" );
                pop_orders.setString(1,ptype);
                pop_orders.setInt(2,doctor_who_ordered);
            	ResultSet rs = pop_orders.executeQuery();
                   while(rs.next()){
                        
                       Order eachorder=new Order();
                       
                      eachorder.setoId(rs.getInt(1));
                      eachorder.setVendorIdinOrder(rs.getInt(2));
                      eachorder.setOrderPrice(rs.getFloat(3));
                      eachorder.setProductIdinOrder(rs.getInt(4));
                      eachorder.setCancelled(rs.getBoolean(5));
                      eachorder.setDispatched(rs.getBoolean(6));
                       orders.add(eachorder);
                     
           		    }
                    Iterator<Order> ordersit = orders.iterator();
                
                    int rowCount=orderHistoryTable.getRowCount();
                     DefaultTableModel dtm= (DefaultTableModel)orderHistoryTable.getModel();
                    for(int i=rowCount-1;i>0;i--){
                        dtm.removeRow(i);
                        }
        
            while(ordersit.hasNext()) {
            Order o=new Order();
            o=ordersit.next();
            //"Oid","VendorID", "Price","ProductId","Cancelled?","Dispatched"
            Object row[] = new Object[6];
            row[0]=o.getoId();
            row[1]=o.getVendorIdinOrder();
            
            row[2]=o.getOrderPrice();
            row[3]=o.getProductIdinOrder();
            row[4]=o.isCancelled();
            row[5]=o.isDispatched();
            
         
            dtm.addRow(row);
        }
                   
                    } catch (SQLException ex) {
            Logger.getLogger(PlaceOrderJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */ 
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        orderHistoryTable = new javax.swing.JTable();
        Cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        orderHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(orderHistoryTable);

        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(Cancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Cancel)
                .addContainerGap(113, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
  
        int rowSelected = orderHistoryTable.getSelectedRow();
             if(rowSelected > 0){
              int cancelled_orederid;
              int product_id;
              int vendor_id;
              int price=0;
              product_id=(Integer)(orderHistoryTable.getModel().getValueAt(rowSelected,3));
              vendor_id=(Integer)(orderHistoryTable.getModel().getValueAt(rowSelected,1));
              
            cancelled_orederid = (Integer)(orderHistoryTable.getModel().getValueAt(rowSelected, 0));
              
              float order_price=(Float)(orderHistoryTable.getModel().getValueAt(rowSelected,2));
              
               
              
            boolean isDispatched=(boolean)orderHistoryTable.getModel().getValueAt(rowSelected, 5); 
              if(isDispatched)
              {JOptionPane.showMessageDialog(null, "Order dispatched.Cannot cancel");}
              else
                  
              {
              PreparedStatement cancel_order;
        try {
            cancel_order = login.con.prepareStatement
                ("Update OrderTable set Cancelled=? where Oid=?" );
                cancel_order.setBoolean(1, true);
                cancel_order.setInt(2,cancelled_orederid);
                cancel_order.execute();
                
                { PreparedStatement userpass =login.con.prepareStatement
                ("select Prdprice from Product  where Prdid=?;");
            	  userpass.setInt(1,product_id);
            	  ResultSet rs = userpass.executeQuery();
            	   while(rs.next()){
            		   price =rs.getInt(1);
                           }}
                System.out.println("individual price"+price);
                int no_of_products=(int) (order_price/price);
                int feteched_quantity=0;
                { PreparedStatement fetch_quantity =login.con.prepareStatement
                ("select quantity from MedicineStockAvailability  where Vendorid=? and Productid=?;");
            	   fetch_quantity.setInt(1,vendor_id);
                fetch_quantity.setInt(2,product_id);
            	  ResultSet rs = fetch_quantity.executeQuery();
            	   while(rs.next()){
            		   feteched_quantity =rs.getInt(1);
                           }}
                int actual_quantity=(feteched_quantity+no_of_products);
                
                 PreparedStatement update_msa_quantity =login.con.prepareStatement
                ("Update MedicineStockAvailability set quantity=? where Vendorid=? and Productid=?");
                    update_msa_quantity.setInt(1,actual_quantity);
                    update_msa_quantity.setInt(2,vendor_id);
                    update_msa_quantity.setInt(3,product_id);
                    update_msa_quantity.execute();
                   
            	   
                
                
                
                
                
                
                
                
                
                
                JOptionPane.showMessageDialog(null, "Order cancelled"+cancelled_orederid);
                
        }
         catch (SQLException ex) {
            Logger.getLogger(PlaceOrderJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
              
              }
              
             }
    }//GEN-LAST:event_CancelActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable orderHistoryTable;
    // End of variables declaration//GEN-END:variables
}
